{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "echo-account-next",
  "type": "registry:component",
  "title": "Echo Account (Next)",
  "description": "Next.js variant of Echo Account",
  "registryDependencies": [
    "popover",
    "skeleton",
    "avatar"
  ],
  "files": [
    {
      "path": "registry/echo/blocks/echo-account-button/echo-account-next.tsx",
      "content": "'use client';\n\nimport { useEcho } from '@merit-systems/echo-next-sdk/client';\nimport { EchoAccountButton } from './echo-account';\n\nexport function EchoAccount() {\n  const echo = useEcho();\n  return <EchoAccountButton echo={echo} />;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/blocks/echo-account-button/echo-account.tsx",
      "content": "'use client';\n\nimport { EchoAccountButtonPopover } from '@/registry/echo/blocks/echo-account-button/echo-popover';\nimport { formatCurrency } from '@/registry/echo/blocks/lib/currency-utils';\nimport { Button } from '@/registry/echo/ui/echo-button';\nimport { Logo } from '@/registry/echo/ui/logo';\nimport { Popover, PopoverTrigger } from '@/registry/echo/ui/popover';\nimport { Skeleton } from '@/registry/echo/ui/skeleton';\nimport { type EchoContextValue } from '@merit-systems/echo-react-sdk';\nimport { Gift } from 'lucide-react';\n\nexport function EchoAccountButton({ echo }: { echo: EchoContextValue }) {\n  const { user, balance, freeTierBalance, signIn, isLoading } = echo;\n\n  const totalBalance =\n    (balance?.balance || 0) + (freeTierBalance?.userSpendInfo.amountLeft || 0);\n  const hasFreeCredits = freeTierBalance?.userSpendInfo.amountLeft ?? 0 > 0;\n  const buttonContent = isLoading ? (\n    <>\n      <Skeleton className=\"h-4 w-4\" />\n      <Skeleton className=\"h-4 w-14\" />\n    </>\n  ) : !user ? (\n    <>\n      <Logo className=\"size-6\" />\n      <span>Sign In</span>\n    </>\n  ) : (\n    <>\n      <Logo className=\"size-6\" />\n      <span>{formatCurrency(totalBalance)}</span>\n    </>\n  );\n\n  const button = (\n    <div className=\"relative inline-flex\">\n      <Button\n        variant=\"outline\"\n        onClick={!user ? signIn : undefined}\n        disabled={isLoading}\n        className=\"w-[100px] justify-start gap-2\"\n      >\n        {buttonContent}\n      </Button>\n      {hasFreeCredits ? (\n        <div className=\"absolute -right-1 -top-1 flex h-4 w-4 items-center justify-center rounded-full bg-primary\">\n          <Gift className=\"size-3 text-primary-foreground \" />\n        </div>\n      ) : null}\n    </div>\n  );\n\n  if (!user || isLoading) {\n    return button;\n  }\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>{button}</PopoverTrigger>\n      <EchoAccountButtonPopover echo={echo} />\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/blocks/echo-account-button/echo-popover.tsx",
      "content": "'use client';\nimport EchoBalance from '@/registry/echo/blocks/echo-account-button/balance';\nimport { EchoTopUpButton } from '@/registry/echo/blocks/echo-account-button/top-up-button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/echo/ui/avatar';\nimport { Button } from '@/registry/echo/ui/echo-button';\nimport { PopoverContent } from '@/registry/echo/ui/popover';\nimport { type EchoContextValue } from '@merit-systems/echo-react-sdk';\nimport { LogOut } from 'lucide-react';\n\nexport function EchoAccountButtonPopover({ echo }: { echo: EchoContextValue }) {\n  const { user, signOut } = echo;\n  return (\n    <PopoverContent className=\"w-[380px] p-0\" align=\"end\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between border-b p-4\">\n        <Button\n          variant=\"ghost\"\n          className=\"flex items-center gap-2 h-auto p-2 -ml-2 hover:bg-accent\"\n          onClick={() =>\n            window.open('https://echo.merit.systems/dashboard', '_blank')\n          }\n        >\n          <div className=\"h-6 w-6 rounded-full bg-primary/10 flex items-center justify-center\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={user?.picture} />\n              <AvatarFallback>\n                {user?.name?.charAt(0) || user?.email?.charAt(0)}\n              </AvatarFallback>\n            </Avatar>\n          </div>\n          <div className=\"text-left\">\n            <h4 className=\"font-medium text-sm\">\n              {user?.name || user?.email || 'Account'}\n            </h4>\n            <p className=\"text-xs text-muted-foreground/80\">{user?.id}</p>\n          </div>\n        </Button>\n        <div className=\"flex gap-2\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => signOut()}>\n            <LogOut className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Balance */}\n      <div className=\"p-4 border-b\">\n        <EchoBalance echo={echo} />\n      </div>\n\n      {/* Add Credits Button */}\n      <div className=\"p-4 border-b\">\n        <EchoTopUpButton echo={echo} />\n      </div>\n    </PopoverContent>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/blocks/echo-account-button/balance.tsx",
      "content": "import { formatCurrency } from '@/registry/echo/blocks/lib/currency-utils';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/registry/echo/ui/tooltip';\nimport { type EchoContextValue } from '@merit-systems/echo-react-sdk';\nimport { Gift } from 'lucide-react';\n\nexport default function EchoBalance({ echo }: { echo: EchoContextValue }) {\n  const { balance, freeTierBalance } = echo;\n\n  const freeTierAmountLeft = freeTierBalance?.userSpendInfo.amountLeft ?? 0;\n  const totalBalance = (balance?.balance || 0) + (freeTierAmountLeft || 0);\n  const hasFreeCredits = freeTierAmountLeft > 0;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"space-y-1 flex flex-col items-center\">\n        <div className=\"flex flex-col items-center gap-1\">\n          <div className=\"text-2xl font-semibold\">\n            {formatCurrency(totalBalance)}\n          </div>\n          {hasFreeCredits && (\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <span>{formatCurrency(balance?.balance || 0)}</span>\n              <span>+</span>\n              <span className=\"flex items-center gap-1\">\n                {formatCurrency(freeTierAmountLeft)}\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div className=\"flex h-4 w-4 items-center justify-center rounded-full bg-primary cursor-help\">\n                        <Gift className=\"size-3 text-primary-foreground\" />\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Free credits you can spend only on this app</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </span>\n            </div>\n          )}\n        </div>\n        <p className=\"text-sm text-foreground\">Available Credits</p>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/blocks/echo-account-button/top-up-button.tsx",
      "content": "'use client';\n\nimport { Button } from '@/registry/echo/ui/echo-button';\nimport { MoneyInput } from '@/registry/echo/ui/money-input';\nimport { type EchoContextValue } from '@merit-systems/echo-react-sdk';\nimport { Check, CreditCard, Edit, Loader2 } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function EchoTopUpButton({ echo }: { echo: EchoContextValue }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const { createPaymentLink } = echo;\n\n  const [amount, setAmount] = useState(10);\n\n  return (\n    <div className=\"flex items-center gap-2 h-11\">\n      {isEditing ? (\n        <>\n          <MoneyInput\n            setAmount={setAmount}\n            initialAmount={amount}\n            className=\"flex-1\"\n            placeholder=\"Enter amount\"\n          />\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"shrink-0\"\n            onClick={() => setIsEditing(false)}\n          >\n            <Check className=\"h-4 w-4\" />\n          </Button>\n        </>\n      ) : (\n        <>\n          <Button\n            className=\"flex-1\"\n            size=\"lg\"\n            variant=\"turbo\"\n            disabled={isLoading}\n            onClick={() => {\n              setIsLoading(true);\n              createPaymentLink(amount)\n                .then(url => window.open(url, '_blank'))\n                .finally(() => setIsLoading(false));\n            }}\n          >\n            {isLoading ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <CreditCard className=\"h-4 w-4 mr-2\" />\n            )}\n            {isLoading ? 'Processing...' : `Add ${amount} Credits`}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"shrink-0\"\n            onClick={() => setIsEditing(true)}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/ui/echo-button.tsx",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex cursor-pointer items-center justify-center whitespace-nowrap rounded-md text-xs md:text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed gap-2 active:shadow-none active:translate-y-[1px]',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        primaryOutline:\n          'border border-primary text-primary bg-transparent shadow-xs hover:bg-primary/20',\n        destructiveOutline:\n          'border border-destructive text-destructive bg-transparent shadow-xs hover:bg-destructive/20',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        primaryGhost: 'hover:bg-primary/20 text-primary',\n        link: 'text-primary underline-offset-4 hover:underline',\n        success: 'bg-green-600 text-white shadow-sm hover:bg-green-700',\n        turbo: cn(\n          'bg-gradient-to-br from-primary via-primary/80 to-primary text-white hover:opacity-90',\n          'shadow-[0_2px_6px_color-mix(in_oklab,var(--primary)_70%,transparent)]',\n          'hover:shadow-[0_2px_4px_color-mix(in_oklab,var(--primary)_70%,transparent)]',\n          'active:shadow-none',\n          'inset-ring-2 inset-ring-inset inset-ring-border/50',\n          'relative overflow-hidden',\n          'before:content-[\"\"] before:absolute before:w-full before:h-full before:rounded-md before:pointer-events-none',\n          'before:bg-gradient-to-r before:from-transparent before:via-white/10 before:to-transparent before:animate-shimmer'\n        ),\n        turboSecondary: cn(\n          'bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600 text-white hover:opacity-90',\n          'shadow-[0_2px_6px_color-mix(in_oklab,theme(colors.gray.500)_70%,transparent)]',\n          'hover:shadow-[0_2px_4px_color-mix(in_oklab,theme(colors.gray.500)_70%,transparent)]',\n          'active:shadow-none',\n          'inset-ring-2 inset-ring-inset inset-ring-border/50',\n          'relative overflow-hidden',\n          'before:content-[\"\"] before:absolute before:w-full before:h-full before:rounded-md before:pointer-events-none',\n          'before:bg-gradient-to-r before:from-transparent before:via-white/10 before:to-transparent before:animate-shimmer'\n        ),\n        unstyled: '',\n      },\n      size: {\n        default: 'h-8 md:h-9 px-4 py-2',\n        xs: 'h-6 rounded-md px-1 text-xs md:text-xs gap-1',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'size-8 md:size-9',\n        navbar: 'size-8 md:h-9 md:w-auto md:px-4 md:py-2',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/blocks/lib/currency-utils.ts",
      "content": "export const formatCurrency = (\n  value: number,\n  options?: Intl.NumberFormatOptions\n): string => {\n  if (value < 0.01 && value > 0) {\n    return '< $0.01';\n  }\n\n  return value.toLocaleString(undefined, {\n    style: 'currency',\n    currency: 'USD',\n    notation: 'compact',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n    ...options,\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/echo/ui/money-input.tsx",
      "content": "import React, { useEffect, useRef } from 'react';\n\nimport AutoNumeric from 'autonumeric';\n\nimport { Input } from '@/registry/echo/ui/input';\n\nimport { cn } from '@/lib/utils';\n\ninterface Props extends React.InputHTMLAttributes<HTMLInputElement> {\n  setAmount: (amount: number) => void;\n  initialAmount?: number;\n  placeholder?: string;\n  prefixClassName?: string;\n  className?: string;\n  inputClassName?: string;\n  hideDollarSign?: boolean;\n  decimalPlaces?: number;\n}\n\nexport const MoneyInput: React.FC<Props> = ({\n  setAmount,\n  initialAmount,\n  placeholder,\n  className,\n  inputClassName,\n  prefixClassName,\n  hideDollarSign,\n  decimalPlaces = 2,\n  ...props\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autoNumericRef = useRef<AutoNumeric | null>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      const minimumValue = '0.000001';\n      const maximumValue = '99999999999999.99';\n\n      autoNumericRef.current = new AutoNumeric(inputRef.current, {\n        digitGroupSeparator: ',',\n        decimalCharacter: '.',\n        decimalPlaces,\n        currencySymbol: '',\n        minimumValue,\n        maximumValue,\n        modifyValueOnWheel: false,\n        formatOnPageLoad: true,\n        unformatOnSubmit: true,\n        watchExternalChanges: true,\n        emptyInputBehavior: 'focus',\n        overrideMinMaxLimits: 'invalid',\n        allowDecimalPadding: false,\n      });\n\n      // Add event listener for value changes\n      inputRef.current.addEventListener('autoNumeric:formatted', () => {\n        const value = autoNumericRef.current?.getNumber() ?? 0;\n        setAmount(value);\n      });\n    }\n\n    return () => {\n      if (autoNumericRef.current) {\n        autoNumericRef.current.remove();\n      }\n    };\n  }, [setAmount, decimalPlaces]);\n\n  return (\n    <div\n      className={cn(\n        'border-border bg-card flex h-fit flex-row items-center overflow-hidden rounded-md border-2 pr-1 transition-colors duration-200',\n        'focus-within:border-ring/80 focus-within:ring-ring/50 focus-within:ring-[3px]',\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'bg-foreground/10 flex aspect-square size-12 h-full items-center justify-center text-lg opacity-60',\n          prefixClassName,\n          hideDollarSign && 'hidden'\n        )}\n      >\n        $\n      </div>\n      <Input\n        {...props}\n        ref={inputRef}\n        type=\"text\"\n        placeholder={placeholder}\n        className={cn(\n          'h-fit w-full [appearance:textfield] border-none bg-transparent px-3 py-0 font-bold shadow-none dark:bg-transparent [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none',\n          'text-xl ring-0 focus-visible:ring-0 focus-visible:ring-offset-0 md:text-xl',\n          inputClassName\n        )}\n        defaultValue={initialAmount?.toString()}\n      />\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/echo/ui/logo.tsx",
      "content": "import Image from 'next/image';\nimport React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface LogoProps extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n  containerClassName?: string;\n  onClick?: () => void;\n  priority?: boolean;\n}\nexport const Logo = React.forwardRef<HTMLDivElement, LogoProps>(\n  ({ className, containerClassName, onClick, priority, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        onClick={onClick}\n        className={containerClassName}\n        {...props}\n      >\n        <Image\n          src=\"/logo/light.svg\"\n          alt=\"Merit Systems Logo\"\n          width={200}\n          height={200}\n          className={cn('dark:hidden size-6', className)}\n          priority={priority}\n        />\n        <Image\n          src=\"/logo/dark.svg\"\n          alt=\"Merit Systems Logo\"\n          width={200}\n          height={200}\n          className={cn('hidden dark:block size-6', className)}\n          priority={priority}\n        />\n      </div>\n    );\n  }\n);\n\nLogo.displayName = 'Logo';\n",
      "type": "registry:component"
    },
    {
      "path": "public/logo/light.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 363.81 363.81\">\n  <defs>\n    <style>\n      .cls-1 {\n        fill: none;\n      }\n\n      .cls-3 {\n        fill: #02b2bf;\n      }\n\n      .cls-4 {\n        fill: #0199ae;\n      }\n\n      .cls-5 {\n        fill: #05c7cc;\n      }\n\n      .ring {\n        stroke: #262626;\n        fill: transparent;\n      }\n\n      .first-ring {\n        stroke-width: 16;\n        stroke-opacity: 0.5;\n      }\n\n      .second-ring {\n        stroke-width: 12;\n        stroke-opacity: 0.4;\n      }\n\n      .third-ring {\n        stroke-width: 8;\n        stroke-opacity: 0.3;\n      }\n\n      .cls-8 {\n        clip-path: url(#clippath);\n      }\n    </style>\n    <clipPath id=\"clippath\">\n      <rect class=\"cls-1\" width=\"363.81\" height=\"363.81\"/>\n    </clipPath>\n  </defs>\n  <g class=\"cls-8\">\n    <g id=\"Layer_1-2\" data-name=\"Layer 1-2\">\n      <g class=\"ring first-ring\">\n        <polygon points=\"183.23,292.39 88.75,237.84 86.94,236.94 86.94,125.62 183.23,70.03 279.52,125.62 279.52,236.8 183.23,292.39\"/>\n      </g>\n      <g class=\"ring second-ring\">\n        <polygon points=\"181.53,329.96 54.34,256.53 53.31,256.19 53.31,107.88 181.53,33.85 309.75,107.88 309.75,255.94 181.53,329.96\"/>\n      </g>\n      <g class=\"ring third-ring\">\n        <polygon points=\"181.53,362.94 181.09,362.69 24.75,272.43 24.75,91.39 25.19,91.14 181.53,0.87 181.97,1.12 338.32,91.39 338.32,272.43 181.97,362.69 181.53,362.94\"/>\n      </g>\n      <polygon class=\"cls-5\" points=\"122.32 145.8 122.32 217.35 184.29 253.13 184.29 181.58 122.32 145.8\"/>\n      <polygon class=\"cls-3\" points=\"184.29 110.03 184.29 110.03 122.32 145.8 184.29 181.58 246.25 145.8 184.29 110.03\"/>\n      <polygon class=\"cls-4\" points=\"246.33 145.8 184.36 181.58 184.36 253.13 184.37 253.13 246.33 217.35 246.33 145.8\"/>\n      \n    </g>\n  </g>\n</svg>",
      "type": "registry:file",
      "target": "~/public/logo/light.svg"
    },
    {
      "path": "public/logo/dark.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 363.81 363.81\">\n  <defs>\n    <style>\n      .cls-1 {\n        fill: none;\n      }\n\n      .cls-3 {\n        fill: #02b2bf;\n      }\n\n      .cls-4 {\n        fill: #0199ae;\n      }\n\n      .cls-5 {\n        fill: #05c7cc;\n      }\n\n      .ring {\n        stroke: #e5e5e5;\n        fill: transparent;\n      }\n\n      .first-ring {\n        stroke-width: 16;\n        stroke-opacity: 0.5;\n      }\n\n      .second-ring {\n        stroke-width: 12;\n        stroke-opacity: 0.4;\n      }\n\n      .third-ring {\n        stroke-width: 8;\n        stroke-opacity: 0.3;\n      }\n\n      .cls-8 {\n        clip-path: url(#clippath);\n      }\n    </style>\n    <clipPath id=\"clippath\">\n      <rect class=\"cls-1\" width=\"363.81\" height=\"363.81\"/>\n    </clipPath>\n  </defs>\n  <g class=\"cls-8\">\n    <g id=\"Layer_1-2\" data-name=\"Layer 1-2\">\n      <g class=\"ring first-ring\">\n        <polygon points=\"183.23,292.39 88.75,237.84 86.94,236.94 86.94,125.62 183.23,70.03 279.52,125.62 279.52,236.8 183.23,292.39\"/>\n      </g>\n      <g class=\"ring second-ring\">\n        <polygon points=\"181.53,329.96 54.34,256.53 53.31,256.19 53.31,107.88 181.53,33.85 309.75,107.88 309.75,255.94 181.53,329.96\"/>\n      </g>\n      <g class=\"ring third-ring\">\n        <polygon points=\"181.53,362.94 181.09,362.69 24.75,272.43 24.75,91.39 25.19,91.14 181.53,0.87 181.97,1.12 338.32,91.39 338.32,272.43 181.97,362.69 181.53,362.94\"/>\n      </g>\n      <polygon class=\"cls-5\" points=\"122.32 145.8 122.32 217.35 184.29 253.13 184.29 181.58 122.32 145.8\"/>\n      <polygon class=\"cls-3\" points=\"184.29 110.03 184.29 110.03 122.32 145.8 184.29 181.58 246.25 145.8 184.29 110.03\"/>\n      <polygon class=\"cls-4\" points=\"246.33 145.8 184.36 181.58 184.36 253.13 184.37 253.13 246.33 217.35 246.33 145.8\"/>\n      \n    </g>\n  </g>\n</svg>",
      "type": "registry:file",
      "target": "~/public/logo/dark.svg"
    }
  ]
}