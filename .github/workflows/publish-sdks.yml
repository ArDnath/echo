name: Publish SDKs to npm

on:
  push:
    branches: [production]
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    name: Publish SDK packages to npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        package:
          - name: echo-typescript-sdk
            path: ./echo-typescript-sdk
            registry-url: https://registry.npmjs.org
          - name: echo-react-sdk
            path: ./echo-react-sdk
            registry-url: https://registry.npmjs.org

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: ${{ matrix.package.registry-url }}

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript SDK first (dependency)
        if: matrix.package.name == 'echo-react-sdk'
        working-directory: ./echo-typescript-sdk
        run: pnpm run build

      - name: Verify version consistency
        working-directory: ${{ matrix.package.path }}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"
          echo "‚úÖ Publishing from production branch or manual trigger - using package version: $PACKAGE_VERSION"

      - name: Build package
        working-directory: ${{ matrix.package.path }}
        run: pnpm run build

      - name: Run tests
        working-directory: ${{ matrix.package.path }}
        run: pnpm run test

      - name: Type check
        working-directory: ${{ matrix.package.path }}
        run: pnpm run type-check

      - name: Check if package already exists on npm
        working-directory: ${{ matrix.package.path }}
        id: check-version
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          FORCE_PUBLISH="${{ github.event.inputs.force_publish }}"

          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            if [ "$FORCE_PUBLISH" = "true" ]; then
              echo "‚ö†Ô∏è  Version $PACKAGE_VERSION of $PACKAGE_NAME already exists on npm, but force_publish is enabled"
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Version $PACKAGE_VERSION of $PACKAGE_NAME already exists on npm"
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚úÖ Version $PACKAGE_VERSION of $PACKAGE_NAME does not exist, proceeding with publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-version.outputs.should_publish == 'true'
        working-directory: ${{ matrix.package.path }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "üöÄ Publishing $PACKAGE_NAME to npm..."
          npm publish --access public
          echo "‚úÖ Successfully published $PACKAGE_NAME"

          # Export package info for tag creation
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PUBLISHED_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

  create-tag:
    name: Create version tag
    runs-on: ubuntu-latest
    needs: publish
    if: needs.publish.result == 'success' && github.ref == 'refs/heads/production' && !startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from TypeScript SDK
        id: get-version
        run: |
          VERSION=$(node -p "require('./echo-typescript-sdk/package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version to tag: v$VERSION"

      - name: Check if tag already exists
        id: check-tag
        run: |
          TAG_NAME="${{ steps.get-version.outputs.version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
            echo "should_create_tag=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME does not exist, will create it"
            echo "should_create_tag=true" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.should_create_tag == 'true'
        run: |
          TAG_NAME="${{ steps.get-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üè∑Ô∏è  Creating tag $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME - Auto-created after npm publish"
          git push origin "$TAG_NAME"
          echo "‚úÖ Tag $TAG_NAME created and pushed"

      - name: Create GitHub Release from auto-tag
        if: steps.check-tag.outputs.should_create_tag == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ steps.get-version.outputs.version }}';
            const { owner, repo } = context.repo;

            try {
              await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: `## SDK Release ${tagName}

            This release includes updates to the following packages:
            - \`@merit-systems/echo-typescript-sdk\`
            - \`@merit-systems/echo-react-sdk\`

            ### Installation
            \`\`\`bash
            npm install @merit-systems/echo-typescript-sdk
            npm install @merit-systems/echo-react-sdk
            \`\`\`

            This tag was automatically created after successful npm publishing from the production branch.

            See the [CHANGELOG](./CHANGELOG.md) for detailed changes.`,
                draft: false,
                prerelease: false
              });
              console.log('‚úÖ GitHub release created successfully for auto-tag');
            } catch (error) {
              console.log('‚ö†Ô∏è  Failed to create GitHub release:', error.message);
            }
