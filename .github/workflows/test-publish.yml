name: Test SDK Publishing (Dry Run)

on:
  push:
    branches: [main]
    paths:
      - 'echo-typescript-sdk/**'
      - 'echo-react-sdk/**'
      - '.github/workflows/publish-sdks.yml'
      - '.github/workflows/test-publish.yml'
      - 'pnpm-lock.yaml'
      - 'package.json'
  pull_request:
    branches: [main]
    paths:
      - 'echo-typescript-sdk/**'
      - 'echo-react-sdk/**'
      - '.github/workflows/publish-sdks.yml'
      - '.github/workflows/test-publish.yml'

jobs:
  test-publish:
    name: Test SDK publishing workflow
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package:
          - name: echo-typescript-sdk
            path: ./echo-typescript-sdk
          - name: echo-react-sdk
            path: ./echo-react-sdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: https://registry.npmjs.org

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Check package configuration
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üì¶ Package: ${{ matrix.package.name }}"
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Name: $PACKAGE_NAME"
          echo "Version: $PACKAGE_VERSION"
          echo "Private: $(node -p "require('./package.json').private || false")"

          # Check if package.json has required fields for publishing
          if [ "$(node -p "require('./package.json').private || false")" = "true" ]; then
            echo "‚ùå Package is marked as private - cannot publish"
            exit 1
          fi

          # Check required fields
          if [ -z "$(node -p "require('./package.json').name")" ]; then
            echo "‚ùå Package name is missing"
            exit 1
          fi

          if [ -z "$(node -p "require('./package.json').version")" ]; then
            echo "‚ùå Package version is missing"
            exit 1
          fi

          echo "‚úÖ Package configuration looks good"

      - name: Build package
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üî® Building ${{ matrix.package.name }}..."
          pnpm run build
          echo "‚úÖ Build completed"

      - name: Run tests
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üß™ Running tests for ${{ matrix.package.name }}..."
          pnpm run test
          echo "‚úÖ Tests passed"

      - name: Type check
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üîç Type checking ${{ matrix.package.name }}..."
          pnpm run type-check
          echo "‚úÖ Type check passed"

      - name: Verify build output
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üìÅ Checking build output..."
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found"
            exit 1
          fi

          echo "üìã Contents of dist directory:"
          ls -la dist/

          # Check for main files
          MAIN_FILE=$(node -p "require('./package.json').main")
          TYPES_FILE=$(node -p "require('./package.json').types")

          if [ ! -z "$MAIN_FILE" ] && [ ! -f "$MAIN_FILE" ]; then
            echo "‚ùå Main file not found: $MAIN_FILE"
            exit 1
          fi

          if [ ! -z "$TYPES_FILE" ] && [ ! -f "$TYPES_FILE" ]; then
            echo "‚ùå Types file not found: $TYPES_FILE"
            exit 1
          fi

          echo "‚úÖ Build output verification passed"

      - name: Test npm pack
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üì¶ Testing npm pack..."
          npm pack --dry-run
          echo "‚úÖ npm pack dry run successful"

      - name: Test npm publish (dry run)
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üöÄ Testing npm publish (dry run)..."
          npm publish --dry-run --access public
          echo "‚úÖ npm publish dry run successful"

      - name: Check package size
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üìè Checking package size..."
          TARBALL=$(npm pack --silent)
          SIZE=$(ls -lh "$TARBALL" | awk '{print $5}')
          echo "Package size: $SIZE"

          # Clean up tarball
          rm "$TARBALL"

          echo "‚úÖ Package size check completed"

      - name: Simulate version check
        working-directory: ${{ matrix.package.path }}
        run: |
          echo "üîç Simulating version check against npm registry..."
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "‚ö†Ô∏è  Version $PACKAGE_VERSION of $PACKAGE_NAME already exists on npm"
            echo "This would be skipped in the real publish workflow"
          else
            echo "‚úÖ Version $PACKAGE_VERSION of $PACKAGE_NAME does not exist - would be published"
          fi

  summary:
    name: Publishing test summary
    runs-on: ubuntu-latest
    needs: test-publish
    if: always()

    steps:
      - name: Test results summary
        run: |
          if [ "${{ needs.test-publish.result }}" = "success" ]; then
            echo "üéâ All publishing tests passed!"
            echo ""
            echo "‚úÖ Both SDK packages are ready for publishing:"
            echo "  - @merit-systems/echo-typescript-sdk"
            echo "  - @merit-systems/echo-react-sdk"
            echo ""
            echo "The packages can be safely published using:"
            echo "  1. Push to production branch (recommended)"
            echo "  2. Or trigger manually via GitHub Actions"
            echo ""
            echo "üìù Release process:"
            echo "  ‚Ä¢ Bump versions: npm version patch|minor|major"
            echo "  ‚Ä¢ Push to production: git push origin production"
            echo "  ‚Ä¢ GitHub Action will auto-publish + create tags"
          else
            echo "‚ùå Publishing tests failed!"
            echo ""
            echo "Please check the workflow logs and fix any issues before attempting to publish."
            exit 1
          fi
