generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  email           String           @unique
  name            String?
  clerkId         String           @unique
  createdAt       DateTime         @default(now()) @db.Timestamptz
  updatedAt       DateTime         @updatedAt @db.Timestamptz
  apiKeys         ApiKey[]
  echoApps        EchoApp[]
  llmTransactions LlmTransaction[]
  payments        Payment[]

  @@map("users")
}

model EchoApp {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now()) @db.Timestamptz
  updatedAt       DateTime         @updatedAt @db.Timestamptz
  userId          String           @db.Uuid
  apiKeys         ApiKey[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  llmTransactions LlmTransaction[]
  payments        Payment[]

  @@map("echo_apps")
}

model ApiKey {
  id        String    @id @default(uuid()) @db.Uuid
  key       String    @unique
  name      String?
  isActive  Boolean   @default(true)
  lastUsed  DateTime? @db.Timestamptz
  metadata  Json?
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
  userId    String    @db.Uuid
  echoAppId String    @db.Uuid
  echoApp   EchoApp   @relation(fields: [echoAppId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Payment {
  id              String   @id @default(uuid()) @db.Uuid
  stripePaymentId String?  @unique
  amount          Int
  currency        String   @default("usd")
  status          String
  description     String?
  createdAt       DateTime @default(now()) @db.Timestamptz
  updatedAt       DateTime @updatedAt @db.Timestamptz
  userId          String   @db.Uuid
  echoAppId       String?  @db.Uuid
  echoApp         EchoApp? @relation(fields: [echoAppId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model LlmTransaction {
  id           String   @id @default(uuid()) @db.Uuid
  model        String
  inputTokens  Int
  outputTokens Int
  totalTokens  Int
  cost         Decimal  @db.Decimal(10, 6)
  prompt       String?
  response     String?
  status       String
  errorMessage String?
  createdAt    DateTime @default(now()) @db.Timestamptz
  userId       String   @db.Uuid
  echoAppId    String?  @db.Uuid
  echoApp      EchoApp? @relation(fields: [echoAppId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("llm_transactions")
}
