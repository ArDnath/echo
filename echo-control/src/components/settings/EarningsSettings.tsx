'use client';

import React from 'react';
import {
  DollarSign,
  Zap,
  Activity,
  Calendar,
  AlertCircle,
  CheckCircle,
  Clock,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { formatCurrency } from '@/lib/balance';
import Image from 'next/image';
import { useEarningsSettings } from '@/hooks/useEarningsSettings';

interface EarningsSettingsProps {
  appId: string;
}

export default function EarningsSettings({ appId }: EarningsSettingsProps) {
  const { transactions, loading, error, pagination, summary, fetchEarnings } =
    useEarningsSettings(appId);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'success':
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'error':
      case 'failed':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'pending':
      case 'processing':
        return <Clock className="h-4 w-4 text-yellow-500" />;
      default:
        return <Activity className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'success':
      case 'completed':
        return 'bg-green-500/10 text-green-700 border-green-500/20';
      case 'error':
      case 'failed':
        return 'bg-red-500/10 text-red-700 border-red-500/20';
      case 'pending':
      case 'processing':
        return 'bg-yellow-500/10 text-yellow-700 border-yellow-500/20';
      default:
        return 'bg-gray-500/10 text-gray-700 border-gray-500/20';
    }
  };

  const formatNumber = (num: number) => {
    return new Intl.NumberFormat('en-US').format(num);
  };

  if (loading && !transactions.length) {
    return (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-2">LLM Transaction Earnings</h3>
        <p className="text-sm text-muted-foreground">
          All LLM transactions and earnings generated by your app
        </p>
      </div>

      {error && (
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4">
          <div className="text-sm text-destructive-foreground">{error}</div>
        </div>
      )}

      {/* Summary Cards */}
      {summary && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-card border border-border rounded-xl p-4">
            <div className="flex items-center space-x-2 mb-1">
              <DollarSign className="h-4 w-4 text-green-500" />
              <p className="text-sm font-medium text-foreground">
                Total Earnings
              </p>
            </div>
            <p className="text-2xl font-bold text-foreground">
              {formatCurrency(summary.totalCost)}
            </p>
          </div>

          <div className="bg-card border border-border rounded-xl p-4">
            <div className="flex items-center space-x-2 mb-1">
              <Zap className="h-4 w-4 text-blue-500" />
              <p className="text-sm font-medium text-foreground">
                Total Tokens
              </p>
            </div>
            <p className="text-2xl font-bold text-foreground">
              {formatNumber(summary.totalTokens)}
            </p>
          </div>

          <div className="bg-card border border-border rounded-xl p-4">
            <div className="flex items-center space-x-2 mb-1">
              <Activity className="h-4 w-4 text-purple-500" />
              <p className="text-sm font-medium text-foreground">
                Transactions
              </p>
            </div>
            <p className="text-2xl font-bold text-foreground">
              {formatNumber(pagination?.totalCount || 0)}
            </p>
          </div>
        </div>
      )}

      {/* Transactions List */}
      <div className="bg-card border border-border rounded-xl p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <Activity className="h-5 w-5 mr-2 text-muted-foreground" />
            <h4 className="text-sm font-semibold text-foreground">
              Transactions ({pagination?.totalCount || 0})
            </h4>
          </div>
          {pagination && pagination.totalCount > 0 && (
            <p className="text-xs text-muted-foreground">
              Page {pagination.page} of {pagination.totalPages}
            </p>
          )}
        </div>

        {transactions.length === 0 ? (
          <div className="text-center py-8">
            <Activity className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
            <p className="text-muted-foreground">
              No transactions found for this app.
            </p>
          </div>
        ) : (
          <div className="space-y-3">
            {transactions.map(transaction => (
              <div
                key={transaction.id}
                className="flex items-center justify-between p-4 bg-muted/20 rounded-lg hover:bg-muted/30 transition-colors duration-200"
              >
                <div className="flex items-center space-x-4 min-w-0 flex-1">
                  {/* User Avatar */}
                  <div className="shrink-0">
                    {transaction.user.profilePictureUrl ? (
                      <Image
                        src={transaction.user.profilePictureUrl}
                        alt={transaction.user.name || transaction.user.email}
                        width={40}
                        height={40}
                        className="w-10 h-10 rounded-full object-cover"
                      />
                    ) : (
                      <div className="w-10 h-10 bg-linear-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
                        {(transaction.user.name || transaction.user.email)
                          .charAt(0)
                          .toUpperCase()}
                      </div>
                    )}
                  </div>

                  {/* Transaction Info */}
                  <div className="min-w-0 flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <p className="text-sm font-semibold text-foreground truncate">
                        {transaction.model}
                      </p>
                      <div
                        className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium border ${getStatusBadgeColor(transaction.status)}`}
                      >
                        {getStatusIcon(transaction.status)}
                        <span className="capitalize">{transaction.status}</span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2 mb-1">
                      <p className="text-xs text-muted-foreground truncate">
                        {transaction.user.name || transaction.user.email}
                      </p>
                      {transaction.apiKey && (
                        <span className="text-xs text-muted-foreground">
                          via {transaction.apiKey.name || 'API Key'}
                        </span>
                      )}
                    </div>
                    <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                      <span className="flex items-center">
                        <Calendar className="h-3 w-3 mr-1" />
                        {formatDate(transaction.createdAt)}
                      </span>
                      <span className="flex items-center">
                        <Zap className="h-3 w-3 mr-1" />
                        {formatNumber(transaction.totalTokens)} tokens
                      </span>
                      <span>{transaction.providerId}</span>
                    </div>
                    {transaction.errorMessage && (
                      <p className="text-xs text-red-600 mt-1 truncate">
                        Error: {transaction.errorMessage}
                      </p>
                    )}
                  </div>
                </div>

                {/* Cost */}
                <div className="text-right ml-4 shrink-0">
                  <div className="flex items-center space-x-1 mb-1">
                    <DollarSign className="h-3 w-3 text-muted-foreground" />
                    <p className="text-sm font-bold text-foreground">
                      {formatCurrency(transaction.cost)}
                    </p>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {formatNumber(transaction.inputTokens)}in +{' '}
                    {formatNumber(transaction.outputTokens)}out
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Pagination */}
        {pagination && pagination.totalPages > 1 && (
          <div className="flex justify-center mt-6 pt-4 border-t border-border/30">
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="sm"
                disabled={!pagination.hasPreviousPage || loading}
                onClick={() => fetchEarnings(pagination.page - 1)}
              >
                Previous
              </Button>
              <span className="text-xs text-muted-foreground px-2">
                {pagination.page} of {pagination.totalPages}
              </span>
              <Button
                variant="ghost"
                size="sm"
                disabled={!pagination.hasNextPage || loading}
                onClick={() => fetchEarnings(pagination.page + 1)}
              >
                Next
              </Button>
            </div>
          </div>
        )}

        <div className="mt-4 pt-4 border-t border-border/30">
          <p className="text-xs text-muted-foreground">
            Showing {transactions.length} transaction
            {transactions.length !== 1 ? 's' : ''} out of{' '}
            {pagination?.totalCount || 0} total. Transactions are ordered by
            date, most recent first.
          </p>
        </div>
      </div>
    </div>
  );
}
